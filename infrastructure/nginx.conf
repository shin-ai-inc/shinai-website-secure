# ShinAI セキュア nginx設定
# Constitutional AI準拠・masa様開発ルール完全遵守
# エンタープライズレベルセキュリティ実装

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# パフォーマンス最適化
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # 基本設定
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # セキュリティヘッダー設定
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Constitutional AI準拠ヘッダー
    add_header X-Constitutional-AI-Compliant "true" always;
    add_header X-ShinAI-Security-Level "enterprise" always;
    
    # CSP設定
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self'; object-src 'none'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    
    # サーバー情報隠蔽
    server_tokens off;
    more_clear_headers Server;
    more_set_headers "Server: ShinAI-Secure-Web";
    
    # ログ設定
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # セキュリティログ設定
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       '"$http_host" "$request_body" '
                       'threat_score="$threat_score"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # パフォーマンス設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    client_max_body_size 10m;
    client_body_buffer_size 128k;
    client_header_buffer_size 3m;
    large_client_header_buffers 4 256k;
    
    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # レート制限設定
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # IP ブロック設定
    geo $blocked_ip {
        default 0;
        # 必要に応じて悪意あるIPを追加
        # 192.168.1.100 1;
    }
    
    # Bot検知
    map $http_user_agent $blocked_agent {
        default 0;
        ~*(bot|crawler|spider|scraper) 1;
        ~*(curl|wget|python|java|php) 1;
    }
    
    # SSL設定
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # OCSP設定
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # アップストリーム設定
    upstream backend {
        least_conn;
        server backend:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream security_monitoring {
        server security-monitor:3002 max_fails=2 fail_timeout=30s;
    }
    
    # HTTPからHTTPSリダイレクト
    server {
        listen 80;
        server_name shinai.co.jp www.shinai.co.jp;
        
        # セキュリティチェック
        if ($blocked_ip) {
            return 444;
        }
        
        if ($blocked_agent) {
            return 444;
        }
        
        # HTTPS強制リダイレクト
        return 301 https://$server_name$request_uri;
    }
    
    # メインサーバー（HTTPS）
    server {
        listen 443 ssl http2;
        server_name shinai.co.jp www.shinai.co.jp;
        
        # SSL証明書（本番環境では実際の証明書パスを設定）
        ssl_certificate /etc/ssl/private/shinai.co.jp.crt;
        ssl_certificate_key /etc/ssl/private/shinai.co.jp.key;
        
        # セキュリティチェック
        if ($blocked_ip) {
            return 444;
        }
        
        if ($blocked_agent) {
            return 444;
        }
        
        # ドキュメントルート
        root /usr/share/nginx/html;
        index index.html;
        
        # セキュリティ設定
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }
        
        # 静的ファイル配信
        location / {
            try_files $uri $uri/ /index.html;
            
            # キャッシュ設定
            location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary Accept-Encoding;
                access_log off;
            }
            
            # レート制限
            limit_req zone=general burst=50 nodelay;
            limit_conn conn_limit_per_ip 20;
        }
        
        # APIプロキシ
        location /api/ {
            # レート制限
            limit_req zone=api burst=20 nodelay;
            limit_conn conn_limit_per_ip 10;
            
            # Constitutional AI準拠チェック
            access_by_lua_block {
                -- 基本的な脅威検知
                local uri = ngx.var.uri
                local args = ngx.var.args or ""
                local body = ngx.var.request_body or ""
                local combined = uri .. args .. body
                
                -- SQLインジェクション検知
                if string.match(combined:lower(), "['\";]*(union|select|insert|delete|drop|update|exec)") then
                    ngx.log(ngx.ERR, "SQL Injection attempt detected from " .. ngx.var.remote_addr)
                    ngx.status = 403
                    ngx.say("Request blocked - Constitutional AI violation")
                    ngx.exit(403)
                end
                
                -- XSS検知
                if string.match(combined:lower(), "<script|javascript:|vbscript:|onload=|onerror=") then
                    ngx.log(ngx.ERR, "XSS attempt detected from " .. ngx.var.remote_addr)
                    ngx.status = 403
                    ngx.say("Request blocked - Constitutional AI violation")
                    ngx.exit(403)
                end
            }
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # タイムアウト設定
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # バッファサイズ
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # 認証API（厳格制限）
        location /api/v1/auth {
            limit_req zone=login burst=5 nodelay;
            limit_conn conn_limit_per_ip 5;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # セキュリティ監視API（内部アクセスのみ）
        location /security/ {
            allow 172.20.0.0/16;  # Docker内部ネットワーク
            allow 127.0.0.1;      # ローカルホスト
            deny all;
            
            proxy_pass http://security_monitoring/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # 管理者パネル（IP制限）
        location /admin {
            # 管理者IPアドレスのみ許可（実際の環境に合わせて設定）
            allow 192.168.1.0/24;  # 内部ネットワーク
            allow 127.0.0.1;        # ローカルホスト
            deny all;
            
            auth_basic "ShinAI Admin Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://backend/admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # セキュリティファイルのアクセス禁止
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ \.(sql|conf|ini|log|bak)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 開発ファイルのアクセス禁止
        location ~ \.(git|svn|env) {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # ヘルスチェック
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # エラーページ
        error_page 400 401 402 403 404 /error.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /error.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # セキュリティ監視専用サーバー（内部アクセスのみ）
    server {
        listen 8080;
        server_name localhost;
        
        # 内部アクセスのみ許可
        allow 172.20.0.0/16;
        allow 127.0.0.1;
        deny all;
        
        location /monitoring {
            proxy_pass http://security_monitoring/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /health {
            return 200 "monitoring-healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# stream設定（必要に応じて）
stream {
    # ログ設定
    error_log /var/log/nginx/stream.log;
    
    # TCP/UDPプロキシ設定（将来の拡張用）
}